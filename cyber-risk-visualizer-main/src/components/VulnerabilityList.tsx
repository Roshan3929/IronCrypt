
import React from 'react';
import VulnerabilityItem from './VulnerabilityItem';
import VulnerabilityModal from './VulnerabilityModal';
import { VulnerabilityData, ProcessedVulnerability } from '../types/vulnerability';
import { generateDocumentation } from '../services/api';
import { Document, Packer, Paragraph, TextRun } from 'docx';
import { saveAs } from 'file-saver';
import { toast } from 'sonner';

interface VulnerabilityListProps {
  data: VulnerabilityData;
  onSelectVulnerability: (vulnerability: ProcessedVulnerability | null) => void;
  selectedVulnerability: ProcessedVulnerability | null;
}

const parseReportContent = (markdownText: string): Paragraph[] => {
  const paragraphs: Paragraph[] = [];
  const lines = markdownText.split('\n');

  const parseLineForTextRuns = (text: string): TextRun[] => {
    const runs: TextRun[] = [];
    const segments = text.split('**');
    segments.forEach((segment, index) => {
      if (segment) {
        runs.push(new TextRun({
          text: segment,
          bold: index % 2 === 1,
        }));
      }
    });
    return runs;
  };

  lines.forEach(line => {
    if (line.startsWith('### ')) {
      paragraphs.push(new Paragraph({ text: line.substring(4), heading: 'Heading3' }));
    } else if (line.startsWith('## ')) {
      paragraphs.push(new Paragraph({ text: line.substring(3), heading: 'Heading2' }));
    } else if (line.startsWith('# ')) {
      paragraphs.push(new Paragraph({ text: line.substring(2), heading: 'Heading1' }));
    } else if (line.startsWith('- ') || line.startsWith('* ')) {
      const content = line.substring(2);
      paragraphs.push(new Paragraph({ children: parseLineForTextRuns(content), bullet: { level: 0 } }));
    } else if (line.trim() === '') {
      paragraphs.push(new Paragraph({ text: '' }));
    } else {
      paragraphs.push(new Paragraph({ children: parseLineForTextRuns(line) }));
    }
  });

  return paragraphs;
};


const VulnerabilityList: React.FC<VulnerabilityListProps> = ({ data, onSelectVulnerability, selectedVulnerability }) => {
  // Process the nested JSON data to create a flat list of vulnerabilities
  const processVulnerabilities = (data: VulnerabilityData): ProcessedVulnerability[] => {
    const vulnerabilities: ProcessedVulnerability[] = [];
    
    Object.entries(data).forEach(([hostIp, hostData]) => {
      hostData.services.forEach(service => {
        service.vulnerabilities.forEach(vuln => {
          vulnerabilities.push({
            ...vuln,
            host_ip: hostIp,
            os: hostData.os,
            port: service.port,
            service_name: service.service_name,
            version: service.version
          });
        });
      });
    });
    
    return vulnerabilities.sort((a, b) => a.ranking - b.ranking);
  };

  const vulnerabilities = processVulnerabilities(data);

  const handleExport = async (vulnerability: ProcessedVulnerability, reportType: 'executive_summary' | 'technical_report') => {
    const readableType = reportType.replace('_', ' ');
    console.log(`Initiating API call for ${readableType} for ${vulnerability.cve_id || 'vulnerability'}...`);
    toast.info(`Generating ${readableType}...`);
    try {
      const generatedText = await generateDocumentation(vulnerability, reportType);
      
      console.log(`Received response from backend for ${readableType}. Content:`, generatedText);

      if (generatedText && typeof generatedText === 'string' && generatedText.trim() !== "") {
        console.log("Content is valid, proceeding to generate .docx file.");
        
        const title = `${reportType.replace('_', ' ')} for ${vulnerability.cve_id || 'Vulnerability'}`;
        const contentParagraphs = parseReportContent(generatedText);

        const doc = new Document({
          sections: [{
            children: [
              new Paragraph({
                text: title,
                heading: "Heading1",
              }),
              ...contentParagraphs,
            ],
          }],
        });

        console.log("Document object created. Now packing to blob...");
        const blob = await Packer.toBlob(doc);
        console.log("Blob created successfully. Details:", blob);

        const fileName = `${vulnerability.cve_id || 'vulnerability'}_${reportType}.docx`;
        
        // Create a link and trigger the download
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        
        // Append to html link element to enable click
        document.body.appendChild(link);
        
        // Start download
        link.click();
        
        // Clean up and remove the link
        if (link.parentNode) {
          link.parentNode.removeChild(link);
        }
        URL.revokeObjectURL(link.href);

        console.log("Download triggered via temporary link.");
        toast.success('Report downloaded successfully!');
      } else {
        console.error(`Failed to generate ${readableType}: received empty, null, or invalid content from backend.`, generatedText);
        toast.error(`Failed to generate ${readableType}: Received no content from server.`);
      }
    } catch (error) {
      console.error(`Error during the documentation generation or file saving process for ${readableType}:`, error);
      toast.error(`Failed to generate ${readableType}: An unexpected error occurred.`);
    }
  };

  return (
    <div className="bg-white rounded-lg overflow-hidden">
      <div className="p-6 border-b border-gray-200">
        <h2 className="text-2xl font-bold text-gray-900">Top Vulnerabilities - Ranked by AI Analysis</h2>
        <p className="text-gray-600 mt-1">Critical vulnerabilities identified and prioritized by our LLM-powered system</p>
      </div>
      
      <div className="overflow-x-auto h-[400px] overflow-y-auto">
        <table className="w-full">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">Rank</th>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">CVE ID</th>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">Severity</th>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">CVSS Score</th>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">Host IP</th>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">Service</th>
              <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {vulnerabilities.map((vulnerability, index) => (
              <VulnerabilityItem
                key={`${vulnerability.host_ip}-${vulnerability.cve_id}`}
                vulnerability={vulnerability}
                onClick={() => onSelectVulnerability(vulnerability)}
                onExport={handleExport}
              />
            ))}
          </tbody>
        </table>
      </div>
      
      {selectedVulnerability && (
        <VulnerabilityModal
          vulnerability={selectedVulnerability}
          onClose={() => onSelectVulnerability(null)}
        />
      )}
    </div>
  );
};

export default VulnerabilityList;
