import os
import json
import google.generativeai as genai
from dotenv import load_dotenv
from google.generativeai.types import GenerationConfig

load_dotenv()

def get_gemini_api_key():
    """Retrieves the Gemini API key from environment variables."""
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("GOOGLE_API_KEY not found in .env file or environment variables.")
    return api_key

def build_prompt(xml_content: str) -> str:
    """Builds the prompt for the LLM with the provided XML content."""
    # Using a f-string with triple quotes for a clean, multi-line prompt
    return f"""<system>
You are a cybersecurity analyst with expertise in network scanning and vulnerability analysis.

Your task is to analyze the provided Nmap XML scan report and return the results in a structured JSON format.

### JSON Output Requirements:
•⁠  ⁠The top-level keys must be IP addresses of the scanned hosts.
•⁠  ⁠For each host, include:
  - "os": a string describing the detected operating system (or "unknown" if not found).
  - "services": an array of detected services, each with:
    - "port": the port number as a string (e.g., "443")
    - "service_name": the name of the service (e.g., "https")
    - "version": the version string (e.g., "OpenSSL 1.1.1g"), or "unknown" if not available
    - "vulnerabilities": an array of detected vulnerabilities, where each vulnerability includes:
      - "cve_id": the CVE ID (e.g., "CVE-2017-0144") or "N/A" if unavailable
      - "cvss_score": a float (e.g., 9.8) or null if unknown
      - "exploitability_score": a float (e.g., 3.9) or null if unknown

### Important Rules:
•⁠  ⁠Do NOT include any text or explanation outside of the JSON block.
•⁠  ⁠If no vulnerabilities are found for a service, return an empty array for "vulnerabilities".
•⁠  ⁠If the OS is not detected, set "os": "unknown".
•⁠  ⁠Ensure strict adherence to the JSON structure below.
•⁠  ⁠The cvss_score and exploitability_score should be NULL in the output of the LLM.

### JSON Format Template (for structure only, do not reuse this data):

{{
  "HOST_IP": {{
    "os": "OS_STRING_OR_UNKNOWN",
    "services": [
      {{
        "port": "PORT_NUMBER",
        "service_name": "SERVICE_NAME",
        "version": "VERSION_STRING_OR_UNKNOWN",
        "vulnerabilities": [
          {{
            "cve_id": "CVE-ID_OR_N/A",
            "cvss_score": SCORE_OR_NULL,
            "exploitability_score": SCORE_OR_NULL
          }}
        ]
      }}
    ]
  }}
}}

Now, analyze the following Nmap XML and return only the final structured JSON response in the format described.
</system>

<data>
{xml_content}
</data>"""


def analyze_scan_data(nmap_xml_content: str) -> dict:
    """
    Analyzes Nmap XML data using the Gemini LLM to identify vulnerabilities.

    Args:
        nmap_xml_content: A string containing the Nmap XML data.

    Returns:
        A dictionary containing the structured vulnerability analysis from the LLM.
        Returns an empty dictionary if an error occurs.
    """
    try:
        api_key = get_gemini_api_key()
        genai.configure(api_key=api_key)

        model = genai.GenerativeModel('gemini-2.5-flash') # Using a capable model

        # Configuration to enforce JSON output
        generation_config = GenerationConfig(
            response_mime_type="application/json"
        )

        prompt = build_prompt(nmap_xml_content)

        print("Sending request to Gemini API...")
        response = model.generate_content(prompt, generation_config=generation_config)
        
        print("Received response from API.")
        # The response.text should be a clean JSON string
        return json.loads(response.text)

    except (ValueError, Exception) as e:
        print(f"An error occurred: {e}")
        return {}

if __name__ == '__main__':
    # This block allows for direct testing of the module
    print("Running vulnerability analyzer module directly for testing...")
    
    # Reading the sample Nmap XML file
    try:
        with open('../data/sample_nmap.xml', 'r') as f:
            sample_xml = f.read()
        
        # Calling the main analysis function
        analysis_result = analyze_scan_data(sample_xml)

        if analysis_result:
            print("\n--- Analysis Result ---")
            # Using json.dumps for pretty printing the output
            print(json.dumps(analysis_result, indent=2))
            print("\n----------------------")
        else:
            print("\nAnalysis failed or returned no result.")

    except FileNotFoundError:
        print("\nError: The sample file '../data/sample_nmap.xml' was not found.")
        print("Please ensure you are running this from the 'src' directory or the path is correct.")
